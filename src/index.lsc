import { CompilerState } from './state'
import * as api from './api'
import { registerLightscriptNodeTypesWithBabelInstance } from './types'

export default LightScript(babel) ->
  // Register LightScript's node types with Babel
  registerLightscriptNodeTypesWithBabelInstance(babel)

  plugin = {
    manipulateOptions(opts, parserOpts): void ->
      state = new CompilerState(babel)
      state.manipulateOptions(opts, parserOpts, plugin)

    parserOverride(code, parserOpts) ->
      // Retrieve compiler state created by manipulateOptions
      state = parserOpts.lscCompiler
      state.parserOverride(code, parserOpts)

    visitor: {
      Program(path, state): void ->
        compilerState = state.file.opts.lscCompiler
        compilerState.visitProgram(path, state)
    }
  }

export { api, registerLightscriptNodeTypesWithBabelInstance }
