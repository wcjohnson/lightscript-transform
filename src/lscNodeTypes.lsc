export registerLightscriptNodeTypes(t, api, context): void ->
  {
    definePluginType, assertNodeType
    assertValueType, assertOneOf
    assertEach, chain, hasType
  } = api

  if not t~hasType("LscTildeCallExpression"):
    t~definePluginType("LscTildeCallExpression", {
      visitor: ["left", "callee", "arguments", "typeParameters", "typeArguments"],
      builder: ["left", "callee", "arguments"],
      aliases: ["Expression"],
      fields: {
        left: {
          validate: assertNodeType("Expression"),
        },
        callee: {
          validate: assertNodeType("Expression"),
        },
        arguments: {
          validate: chain(
            assertValueType("array"),
            assertEach(
              assertNodeType("Expression", "SpreadElement", "JSXNamespacedName"),
            ),
          ),
        },
        calleeOptional: {
          validate: assertOneOf(true, false),
          optional: true,
        },
        leftOptional: {
          validate: assertOneOf(true, false),
          optional: true,
        },
        typeArguments: {
          validate: assertNodeType("TypeParameterInstantiation"),
          optional: true,
        },
        typeParameters: {
          validate: assertNodeType("TSTypeParameterInstantiation"),
          optional: true,
        },
      },
    })

  if not t~hasType("LscOptionalTildeCallExpression"):
    t~definePluginType("LscOptionalTildeCallExpression", {
      visitor: ["left", "callee", "arguments", "typeParameters", "typeArguments"],
      builder: ["left", "callee", "arguments"],
      aliases: ["Expression"],
      fields: {
        left: {
          validate: assertNodeType("Expression"),
        },
        callee: {
          validate: assertNodeType("Expression"),
        },
        arguments: {
          validate: chain(
            assertValueType("array"),
            assertEach(
              assertNodeType("Expression", "SpreadElement", "JSXNamespacedName"),
            ),
          ),
        },
        calleeOptional: {
          validate: assertOneOf(true, false),
          optional: true,
        },
        leftOptional: {
          validate: assertOneOf(true, false),
          optional: true,
        },
        typeArguments: {
          validate: assertNodeType("TypeParameterInstantiation"),
          optional: true,
        },
        typeParameters: {
          validate: assertNodeType("TSTypeParameterInstantiation"),
          optional: true,
        },
      },
    })

  if not t~hasType("LscForInArrayStatement"):
    t~definePluginType("LscForInArrayStatement", {
      visitor: ["idx", "elem", "array", "body"],
      aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement", "ForIn"],
      fields: {
        elem: {
          validate: assertNodeType("Identifier"),
          optional: true,
        },
        idx: {
          validate: assertNodeType("Identifier"),
          optional: true,
        },
        array: {
          validate: assertNodeType("Expression"),
        },
        body: {
          validate: assertNodeType("Statement"),
        },
      },
    });

  if not t~hasType("LscForInObjectStatement"):
    t~definePluginType("LscForInObjectStatement", {
      visitor: ["key", "val", "object", "body"],
      aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement", "ForIn"],
      fields: {
        key: {
          validate: assertNodeType("Identifier"),
          optional: true,
        },
        val: {
          validate: assertNodeType("Identifier"),
          optional: true,
        },
        object: {
          validate: assertNodeType("Expression"),
        },
        body: {
          validate: assertNodeType("Statement"),
        },
      },
    });

  if not t~hasType("LscSpreadLoop"):
    t~definePluginType("LscSpreadLoop", {
      builder: ["loop"]
      visitor: ["loop"]
      aliases: ["Expression"]
      fields: {
        loop: {
          validate: assertNodeType("ForStatement")
        }
      }
    })

  if not t~hasType("LscNamedArrowDeclaration"):
    t~definePluginType("LscNamedArrowDeclaration", {
      builder: ["id", "params", "body", "skinny", "async", "generator"],
      visitor: ["id", "params", "body", "returnType", "typeParameters"],
      aliases: [
        "Scopable",
        "BlockParent",
        "FunctionParent",
        "Statement",
        "Pureish",
        "Declaration",
        "FunctionDeclaration",
        "LscNamedArrowFunction",
        "LscFunction",
      ],
      pluginAliases: [
        "Function"
      ],
      fields: {  // DUP in NamedArrowMemberExpression
        id: {
          validate: assertNodeType("Identifier"),
        },
        params: {
          validate: chain(
            assertValueType("array"),
            assertEach(assertNodeType("LVal"))
          ),
        },
        body: {
          validate: assertNodeType("BlockStatement", "Expression"),
        },
        skinny: {
          validate: assertValueType("boolean")
        },
        generator: {
          default: false,
          validate: assertValueType("boolean")
        },
        async: {
          default: false,
          validate: assertValueType("boolean")
        },
      },
    });

  if not t~hasType("LscNamedArrowExpression"):
    t~definePluginType("LscNamedArrowExpression", {
      inherits: "LscNamedArrowDeclaration",
      aliases: [
        "Scopable",
        "FunctionExpression",
        "BlockParent",
        "FunctionParent",
        "Expression",
        "Pureish",
        "LscNamedArrowFunction",
        "LscFunction",
      ],
      pluginAliases: [
        "Function"
      ]
    });

  if not t~hasType("LscNamedArrowMemberExpression"):
    t~definePluginType("LscNamedArrowMemberExpression", {
      inherits: "LscNamedArrowExpression",
      visitor: ["object", "id", "params", "body", "returnType", "typeParameters"],
      fields: {  // c/p from NamedArrowExpression except for `object`
        id: {
          validate: assertNodeType("Identifier"),
        },
        object: {
          validate: assertNodeType("Identifier", "MemberExpression"),
        },
        params: {
          validate: chain(
            assertValueType("array"),
            assertEach(assertNodeType("LVal"))
          ),
        },
        body: {
          validate: assertNodeType("BlockStatement", "Expression"),
        },
        skinny: {
          validate: assertValueType("boolean")
        },
        generator: {
          default: false,
          validate: assertValueType("boolean")
        },
        async: {
          default: false,
          validate: assertValueType("boolean")
        },
      },
    });

  if not t~hasType("LscIfExpression"):
    t~definePluginType("LscIfExpression", {
      visitor: ["test", "consequent", "alternate"],
      aliases: ["Expression", "Conditional"],
      fields: {
        test: {
          validate: assertNodeType("Expression")
        },
        consequent: {
          validate: assertNodeType("Expression", "BlockStatement", "ExpressionStatement")
        },
        alternate: {
          optional: true,
          validate: assertNodeType("Expression", "BlockStatement", "ExpressionStatement")
        }
      }
    });

  if not t~hasType("LscMatchExpression"):
    t~definePluginType("LscMatchExpression", {
      builder: ["discriminant", "cases"],
      visitor: ["discriminant", "cases"],
      aliases: ["Expression", "Conditional"],
      fields: {
        discriminant: {
          validate: assertNodeType("Expression")
        },
        cases: {
          validate: chain(assertValueType("array"), assertEach(assertNodeType("MatchCase")))
        }
      }
    });

  if not t~hasType("LscMatchStatement"):
    t~definePluginType("LscMatchStatement", {
      builder: ["discriminant", "cases"],
      visitor: ["discriminant", "cases"],
      aliases: ["Statement", "Conditional"],
      fields: {
        discriminant: {
          validate: assertNodeType("Expression")
        },
        cases: {
          validate: chain(assertValueType("array"), assertEach(assertNodeType("MatchCase")))
        }
      }
    });

  if not t~hasType("LscMatchCase"):
    t~definePluginType("LscMatchCase", {
      builder: ["outerGuard", "atoms", "binding", "assertive", "innerGuard", "consequent"],
      visitor: ["outerGuard", "atoms", "binding", "innerGuard", "consequent"],
      fields: {
        outerGuard: {
          validate: assertNodeType("Expression", "MatchElse")
          optional: true
        }
        atoms: {
          validate: chain(assertValueType("array"), assertEach(assertNodeType("Expression")))
          optional: true
        }
        binding: {
          validate: assertNodeType("ArrayPattern", "ObjectPattern")
          optional: true
        }
        assertive: {
          validate: assertValueType("boolean")
          optional: true
        }
        innerGuard: {
          validate: assertNodeType("Expression")
          optional: true
        }
        consequent: {
          validate: assertNodeType("Expression", "Statement")
        }
      }
    });

  if not t~hasType("LscMatchElse"):
    t~definePluginType("LscMatchElse", {
    });

  if not t~hasType("LscMatchPlaceholderExpression"):
    t~definePluginType("LscMatchPlaceholderExpression", {
      aliases: ["Expression"]
    });

  if not t~hasType("LscPlaceholderExpression"):
    t~definePluginType("LscPlaceholderExpression", {
      aliases: ["Expression"]
    });

  if not t~hasType("LscTryExpression"):
    t~definePluginType("LscTryExpression", {
      builder: ["block", "handler", "finalizer", "twoValued"],
      visitor: ["block", "handler", "finalizer"],
      aliases: ["Expression"],
      fields: {
        block: {
          validate: assertNodeType("Expression", "BlockStatement"),
        },
        handler: {
          optional: true,
          validate: assertNodeType("CatchClause"),
        },
        finalizer: {
          optional: true,
          validate: assertNodeType("BlockStatement"),
        },
        twoValued: {
          default: false,
          validate: assertValueType("boolean")
        },
      },
    });

  if not t~hasType("LscTryStatement"):
    t~definePluginType("LscTryStatement", {
      builder: ["block"],
      visitor: ["block"],
      aliases: ["Statement"],
      fields: {
        block: {
          validate: assertNodeType("Expression", "BlockStatement"),
        },
      },
    });

  if not t~hasType("LscSafeAwaitExpression"):
    t~definePluginType("LscSafeAwaitExpression", {
      builder: ["argument"],
      visitor: ["argument"],
      aliases: ["AwaitExpression", "Expression", "Terminatorless"],
      fields: {
        argument: {
          validate: assertNodeType("Expression"),
        }
      }
    });
