import traverse from '@babel/traverse'

import findBabelOptionsForPlugin from './util/findBabelOptionsForPlugin'
import parseConfigurationDirectives from './util/parseConfigurationDirectives'

import { Options } from './state/options'
import { Imports } from './state/imports'
import { setGlobalState } from './state/globalState'

import { parse } from '@lightscript/parser'

import mainPass from './visitors/main'

export class CompilerState:
  constructor(babel) ->
    this.babel = babel
    this.options = new Options(this)
    this.imports = new Imports(this, this.options)

  debugDump() ->
    rst = Object.assign({}, this)
    delete rst.babel
    rst

  // Babel manipulateOptions hook
  // Here we can learn the filename (opts.filename) we're parsing, plus any user
  // provided options
  manipulateOptions(opts, parserOpts, plugin): void ->
    this.options.setOptions(opts, parserOpts, findBabelOptionsForPlugin(opts, plugin))

    // Add references to the compiler accessible from the Babel config
    opts.lscCompiler = this
    parserOpts.lscCompiler = this

  // Babel parserOverride hook
  // Here we can parse configuration directives from the actual code
  parserOverride(code, parserOpts) ->
    this.options.setPreParseOptions(parserOpts, parseConfigurationDirectives(code))
    lscParserOpts = this.options.getParserOptions()

    //console.log("parseOverride", lscParserOpts)

    ast = parse(code, lscParserOpts)
    ast

  // Determine if the file we're working on should be treated as LightScript.
  isLightScript(): boolean ->
    this.options.isLightScript

  // Main program visitor
  visitProgram(path): void ->
    // Only transform LightScript files.
    if not this.isLightScript(): return

    // Create a new traversal context using our own internal babel-traverse
    let fileNode = path.parent
    let programPath = null
    traverse(fileNode, {
      Program(path): void {
        now programPath = path
      }
    })

    // Initialize the state vector
    this.programPath = programPath
    this.imports.initialize()
    setGlobalState(this)

    // Execute compiler passes
    mainPass(this, programPath)
